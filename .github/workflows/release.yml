name: Automatic Release and Version Tagging

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  REGISTRY: docker.io
  IMAGE_NAME: syntaxsorcerer7/internet-monitor

jobs:
  # Job 1: Version ermitteln und Release erstellen
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest tag
      id: latest_tag
      run: |
        # Hole den letzten Git-Tag, falls vorhanden
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"

    - name: Calculate next version
      id: version
      run: |
        LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
        
        # Entferne 'v' Prefix falls vorhanden
        VERSION=${LATEST_TAG#v}
        
        # Parse Semantic Versioning (major.minor.patch)
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Bestimme Version-Type
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
        else
          VERSION_TYPE="patch"
        fi
        
        # Erh√∂he entsprechende Version
        case $VERSION_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        NEW_TAG="v$NEW_VERSION"
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "Next version: $NEW_VERSION (Tag: $NEW_TAG)"

    - name: Check if tag already exists
      run: |
        if git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
          echo "Error: Tag ${{ steps.version.outputs.tag }} already exists!"
          exit 1
        fi

    - name: Create and push tag
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.tag }}"
        git push origin "${{ steps.version.outputs.tag }}"

    - name: Generate changelog
      id: changelog
      run: |
        # Generiere Changelog basierend auf Commits seit letztem Tag
        LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
        
        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          # Erstes Release - alle Commits
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          # Commits seit letztem Tag
          CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Escape Newlines f√ºr GitHub Output
        CHANGELOG="${CHANGELOG//'%'/'%25'}"
        CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
        CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
        
        echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Release ${{ steps.version.outputs.tag }}
        body: |
          ## üöÄ Release ${{ steps.version.outputs.tag }}
          
          ### üìã √Ñnderungen
          ${{ steps.changelog.outputs.changelog }}
          
          ### üê≥ Docker Image
          ```bash
          docker pull syntaxsorcerer7/internet-monitor:${{ steps.version.outputs.version }}
          docker pull syntaxsorcerer7/internet-monitor:latest
          ```
          
          ### üì¶ Installation
          ```bash
          # Mit spezifischer Version
          docker run -d -p 5000:5000 syntaxsorcerer7/internet-monitor:${{ steps.version.outputs.version }}
          
          # Oder mit latest
          docker run -d -p 5000:5000 syntaxsorcerer7/internet-monitor:latest
          ```
        draft: false
        prerelease: false

  # Job 2: Docker Build und Push mit neuen Tags
  build-and-push:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create-release.outputs.tag }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest
          type=raw,value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update Docker Hub description
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        repository: ${{ env.IMAGE_NAME }}
        readme-filepath: ./DOCKER_README.md

    - name: Notify success
      run: |
        echo "‚úÖ Successfully released version ${{ needs.create-release.outputs.version }}"
        echo "üê≥ Docker images pushed with tags:"
        echo "   - latest"
        echo "   - ${{ needs.create-release.outputs.version }}"
        echo "üì¶ GitHub Release created: ${{ needs.create-release.outputs.tag }}"
